#!/usr/bin/python
from os import listdir
from subprocess import run
from argparse import ArgumentParser
import logging

TEX_NAME = "main.tex"  # Name of main .tex file
AUX_DIR = "./tmp"  # Directory used for compilation
OUT_DIR = "./"  # Final PDF output directory
OUT_NAME = "main"  # Final PDF name, without .pdf

LATEX = "pdflatex"  # LaTeX compiler


def pre_build():
    logging.debug("BEGIN PRE-BUILD ACTIONS")


def build(live=False, draft=False, spell=False, verbose=False):
    logging.debug("BEGIN BUILD")

    # Spell check
    if spell:
        run(["aspell", "--mode=tex", "check", TEX_NAME])
        if live:
            logging.warning("Live mode enabled: spell check will only run once.")

    # Start making the command for latexmk
    command = ["latexmk"]
    if live:
        command.append("-pvc")
    if verbose:
        command.append("-verbose")
    else:
        command.append("-silent")
    command += [
        "-" + LATEX,
        "--output-directory=" + OUT_DIR,
        "-aux-directory=" + AUX_DIR,
        "-halt-on-error",
        "-interaction=nonstopmode",
        TEX_NAME,
    ]

    logging.debug("Working directory: " + str(listdir()))
    logging.debug("Latexmk command: " + str(command))

    run(command)


def post_build():
    logging.debug("BEGIN POST-BUILD ACTIONS")


def parse_arguments():
    parser = ArgumentParser("./build")
    parser.add_argument(
        "-l", "--live", dest="live", action="store_true", help="specify build type"
    )
    parser.add_argument(
        "-d", "--draft", dest="draft", action="store_true", help="not include images"
    )
    parser.add_argument(
        "-s", "--spell-check", dest="spell", action="store_true", help="enable aspell"
    )
    parser.add_argument(
        "-v", "--verbose", dest="verbose", action="store_true", help="make verbose"
    )
    args = parser.parse_args()
    return args.live, args.draft, args.spell, args.verbose, args


def main():
    live, draft, spell, verbose, args = parse_arguments()
    if verbose:
        logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.DEBUG)
    else:
        logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.WARNING)

    logging.debug("TEX_NAME: " + TEX_NAME)
    logging.debug("AUX_DIR: " + AUX_DIR)
    logging.debug("OUT_DIR: " + OUT_DIR)
    logging.debug("OUT_NAME: " + OUT_NAME)
    logging.debug("LATEX: " + LATEX)
    logging.debug("Arguments: " + str(args))

    pre_build()
    build(live, draft, spell, verbose)
    post_build()


if __name__ == "__main__":
    main()
