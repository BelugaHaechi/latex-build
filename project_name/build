#!/usr/bin/python
from os import listdir
from subprocess import run
from argparse import ArgumentParser
import tomllib
from packaging import version
import logging

script_version = "v2.0"


def pre_build():
    logging.debug("Begin pre-build actions.")


def build(build_config, live=False, draft=False, spell=False, verbose=False):
    logging.debug("BEGIN BUILD")

    # Spell check
    if spell:
        run(["aspell", "--mode=tex", "check", build_config["latexmk"]["TEX_NAME"]])
        if live:
            logging.warning("Live mode enabled: spell check will only run once.")

    # Start making the command for latexmk
    command = ["latexmk"]
    if live:
        command.append("-pvc")
    if verbose:
        command.append("-verbose")
    else:
        command.append("-silent")
    command += [
        "-" + build_config["latexmk"]["LATEX"],
        "--output-directory=" + build_config["latexmk"]["OUT_DIR"],
        "-aux-directory=" + build_config["latexmk"]["AUX_DIR"],
        "-halt-on-error",
        "-interaction=nonstopmode",
        build_config["latexmk"]["TEX_NAME"],
    ]

    logging.debug("Working directory: " + str(listdir()))
    logging.debug("Latexmk command: " + str(command))

    run(command)


def post_build():
    logging.debug("Begin post-build actions.")


def parse_arguments(toml_location="./build.toml"):
    parser = ArgumentParser("./build")
    parser.add_argument(
        "-l", "--live", dest="live", action="store_true", help="specify build type"
    )
    parser.add_argument(
        "-d", "--draft", dest="draft", action="store_true", help="not include images"
    )
    parser.add_argument(
        "-s", "--spell-check", dest="spell", action="store_true", help="enable aspell"
    )
    parser.add_argument(
        "-v", "--verbose", dest="verbose", action="store_true", help="make verbose"
    )
    parser.add_argument(
        "--script",
        dest="script",
        action="store_true",
        help="enable legacy options, disallow unknown arguments",
    )
    args = parser.parse_known_args()
    if len(args) > 1:
        if args[0].script:
            logging.critical("Unknown arguments detected in script mode. Exiting now.")
            exit(1)
        logging.warning("Unknown arguments: " + str(args[1]))

    with open(toml_location, "rb") as f:
        build_config = tomllib.load(f)

    return args[0], build_config


def main():
    args, build_config = parse_arguments()
    live, draft, spell, verbose = args.live, args.draft, args.spell, args.verbose

    if verbose:
        logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.DEBUG)
    else:
        logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.WARNING)

    logging.debug("build.toml version: " + build_config["latex-build"]["version"])

    if version.parse(script_version) > version.parse(
        build_config["latex-build"]["version"]
    ):
        logging.warning("build.toml generated from old version of python script.")
    elif version.parse(script_version) < version.parse(
        build_config["latex-build"]["version"]
    ):
        logging.critical(
            "build.toml generated from future version of python script. Exiting now."
        )
        exit(1)

    logging.debug(".toml file: " + str(build_config))
    logging.debug("Main .tex file: " + build_config["latexmk"]["TEX_NAME"])
    logging.debug("Auxiliary directory: " + build_config["latexmk"]["AUX_DIR"])
    logging.debug("Output directory: " + build_config["latexmk"]["OUT_DIR"])
    logging.debug("PDF file name: " + build_config["latexmk"]["OUT_NAME"])
    logging.debug("LaTeX compiler: " + build_config["latexmk"]["LATEX"])
    logging.debug("Arguments: " + str(args))

    pre_build()
    build(build_config, live, draft, spell, verbose)
    post_build()

    exit(0)


if __name__ == "__main__":
    main()
